[build-system]
build-backend = "hatchling.build"
requires = [
  "hatch-vcs",
  "hatchling",
]

[project]
name = "vector"
description = "Vector classes and utilities"
readme = { file = "README.md", content-type = "text/markdown" }
keywords = [
  "vector",
]
maintainers = [
  { name = "The Scikit-HEP admins", email = "scikit-hep-admins@googlegroups.com" },
]
authors = [
  { name = "Jim Pivarski, Henry Schreiner, Eduardo Rodrigues", email = "eduardo.rodrigues@cern.ch" },
]
requires-python = ">=3.9"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: BSD License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Information Analysis",
  "Topic :: Scientific/Engineering :: Mathematics",
  "Topic :: Scientific/Engineering :: Physics",
  "Typing :: Typed",
]
dynamic = [
  "version",
]
dependencies = [
  "numpy>=1.13.3",
  "packaging>=19",
]

[project.optional-dependencies]
awkward = ["awkward>=2"]
numba = ["numba>=0.57; python_version<'3.14'"]
sympy = ["sympy"]

[project.urls]
"Bug Tracker" = "https://github.com/scikit-hep/vector/issues"
Changelog = "https://vector.readthedocs.io/en/latest/changelog.html"
Discussions = "https://github.com/scikit-hep/vector/discussions"
Documentation = "https://vector.readthedocs.io/"
Homepage = "https://github.com/scikit-hep/vector"

[project.entry-points]
numba_extensions.init = "vector:register_numba"

[dependency-groups]
test = [
  "nox",
  "papermill>=2.4",
  "pytest>=6",
  "pytest-cov>=3",
  "pytest-doctestplus",
]
test-optional = [
  "awkward>=2",
  "numba>=0.57; python_version<'3.14'",
  "sympy",
]
test-extras = [
  "jax",
  "dask_awkward",
  "spark-parser",
  "optree>=0.16",
]
docs = [
  "awkward>=2",
  "sympy",
  "ipykernel",
  "myst-parser>0.13",
  "nbsphinx",
  "sphinx>=4",
  "sphinx-book-theme>=0.0.42",
  "sphinx-copybutton",
  "sphinx-math-dollar",
  "hepunits",
  "matplotlib",
]
test-all = [
  { include-group = "test"},
  { include-group = "test-optional"},
  { include-group = "test-extras"},
]
dev = [
  { include-group = "test"},
  { include-group = "test-optional"},
]

[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/vector/_version.py"

[tool.ruff.lint]
extend-select = [
  "B",   # flake8-bugbear
  "I",   # isort
  "C4",  # flake8-comprehensions
  "ISC", # flake8-implicit-str-concat
  "PGH", # pygrep-hooks
  "PIE", # flake8-pie
  "PL",  # pylint
  "PT",  # flake8-pytest-style
  "RUF", # Ruff-specific
  "SIM", # flake8-simplify
  "T20", # flake8-print
  "UP",  # pyupgrade
  "YTT", # flake8-2020
]
ignore = [
  "PLR09",   # Too many X
  "PLR2004", # Magic values
  "ISC001", # Conflicts with formatter
]
typing-modules = [
  "vector._typeutils",
]
isort.required-imports = [
  "from __future__ import annotations",
]

[tool.ruff.lint.per-file-ignores]
"noxfile.py" = [
  "T20",
]
"tests/*" = [
  "T20",
]
"docs/src/*.ipynb" = [
  "T20", "I001", "I002", "F811"
]
"src/vector/__init__.py" = [
  "PLC0415",
]
"src/vector/_methods.py" = [
  "PLC0415",
]
"src/vector/_pytree.py" = [
  "PLC0415",
]
"src/vector/backends/_numba_object.py" = [
  "PGH003",
]
"src/vector/backends/awkward.py" = [
  "PLC0415",
]
"src/vector/backends/awkward_constructors.py" = [
  "PLC0415",
]
"src/vector/backends/object.py" = [
  "PLC0415",
]
"tests/backends/test_operators.py" = [
  "SIM201",
  "SIM202",
  "PLR0124",
]

[tool.pylint]
master.py-version = "3.9"
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
master.jobs = "0"
messages_control.enable = [
  "useless-suppression",
]
messages_control.disable = [
  "fixme",
  "invalid-name",
  "line-too-long",
  "missing-class-docstring",
  "missing-function-docstring",
  "missing-module-docstring",
  "protected-access",
  "too-few-public-methods",
  "too-many-arguments",
  "too-many-branches",
  "too-many-lines",
  "too-many-locals",
  "too-many-return-statements",
  "too-many-statements",
  "too-many-positional-arguments",
  "wrong-import-position",
  "duplicate-code",
  "import-outside-toplevel",
  "import-error",
  "disallowed-name",
  "cyclic-import",
  "no-self-use",
  "unnecessary-lambda",
  "unnecessary-pass",
  "too-many-ancestors",
  "redefined-outer-name",
  "unused-argument",
  "no-else-return",
  "redefined-builtin",
  "too-many-boolean-expressions",
  "too-many-public-methods",
  "inconsistent-return-statements",
  "reimported",
  "cast_python_value",
  "unused-variable",
  "unsubscriptable-object",
  "abstract-method",
  "no-member",
  "consider-using-enumerate",
  "global-statement",
  "function-redefined",
  "ungrouped-imports",
  "unused-import",
  "pointless-string-statement",
  "useless-option-value",
  "cast_python_value",
  "unknown-option-value",
  "no-else-raise",
  "unidiomatic-typecheck",
  "possibly-used-before-assignment", # TODO: Fix this
  "used-before-assignment", # TODO: Fix this
]

[tool.pytest.ini_options]
minversion = "6.0"
xfail_strict = true
addopts = [
  "-ra",
  "--strict-markers",
  "--strict-config",
]
testpaths = [
  "tests",
]
markers = [
  "slow",
  "numba",
  "awkward",
  "sympy",
]
log_cli_level = "DEBUG"
filterwarnings = [
  "error",
  "ignore::DeprecationWarning",
  "ignore::UserWarning",
]

[tool.mypy]
files = [
  "src/vector",
]
python_version = "3.9"
strict = true
warn_return_any = false
enable_error_code = [
  "ignore-without-code",
  "truthy-bool",
  "redundant-expr",
]
warn_unreachable = false

[[tool.mypy.overrides]]
module = [
  "vector._compute.*.*",
  "numba.*",
  "awkward.*",
]
ignore_missing_imports = true
disallow_untyped_defs = false
disallow_untyped_calls = false

[[tool.mypy.overrides]]
module = "vector._pytree"
# optree register_node typing requires vectors to be Collection, unnecessarily
disable_error_code = ["call-arg", "arg-type"]
